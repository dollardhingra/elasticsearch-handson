# ------------------------------
# 1. Basic Indexing: Create a document with POST
# ------------------------------

# We'll be adding products to a product catalog. Let's add our first JSON doc:

POST /products_index_test/product
{
  "name": "Orange Shirt",
  "description": "This is an orange shirt."
}

# Indexing the document automatically created the index for us, named "product_index_test" with mapping type "product"

# The product is now in the index!

# Let's find it in the index using a GET command:
GET /products_index_test/_search

# ------------------------------
# 2. Basic Indexing: Create a document with PUT
# ------------------------------
# POST creates the document's ID for us
# PUT requires an id for the document, as part of the URL

# If we run the following we'll get an error
PUT /products_index_test/product
{
  "name": "Blue Shirt",
  "description": "This is a blue shirt."
}

# The error is expected!
# Run this instead:
PUT /products_index_test/product/1
{
  "name": "Blue Shirt",
  "description": "This is an blue shirt."
}

# Run this to get all of the products in our index
GET /products_index_test/_search

# We now have an Orange Shirt and a Blue Shirt in our index.

# Instead of dynamically creating the index based on the first document we add, we can create the index beforehand, to set certain settings. We will do that later on in the tutorial today.

# ------------------------------
# 3. Basic Indexing: Bulk adding products
# ------------------------------

# When you need to index a lot of docs, you should use the bulk API, you may see signficant performance benefits

POST /products_index_test/product/_bulk
{ "index": { "_id": 2 }}
{"name": "Green Shirt", "description": "This is a green shirt."}
{ "index": { "_id": 3 }}
{"name": "Purple Shirt", "description": "This is a purple shirt."}


GET /products_index_test/_search

# Let's delete this index, since we won't be using it again.
DELETE /products_index_test
